# -*- coding: utf-8 -*-
"""Latent_factor_recommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gm8Wp6vpqfCaRi7Os30k4TE5VsptX0ew
"""

import pandas as pd
import numpy as np
# %matplotlib inline
import matplotlib.pyplot as plt
import seaborn as sns

k = 20
reg_penalty = 0.1
max_iter = 40
learning_rate = 0.01

q = {}
p = {}

with open("ratings.train.txt") as f:
  lines = f.readlines()
  for line in lines:
    record = line.split("\t")
    #print(type(record[0]))
    user_id = int(record[0])
    movie_id = int(record[1])
    #print(type(user_id))
    if movie_id in q:
      pass
    else:
      q[movie_id] = np.random.rand(k) * np.sqrt(5/k)
    if user_id in p:
      pass
    else:
      p[user_id] = np.random.rand(k) * np.sqrt(5/k)

error_vals = []
for iter in range(max_iter):
  with open("ratings.train.txt") as f:
    lines = f.readlines()
    for line in lines:
      record = line.split("\t")
      user_id = int(record[0])
      movie_id = int(record[1])
      rating = int(record[2])
      q_here = q[movie_id]
      p_here = p[user_id]
      error_derivative = 2*(rating - q_here.dot(p_here.T))
      q_new = q_here - learning_rate*(2*reg_penalty*q_here - error_derivative*p_here)
      p_new = p_here - learning_rate*(2*reg_penalty*p_here - error_derivative*q_here)
      q[movie_id] = q_new
      p[user_id] = p_new

  error_here = 0
  with open("ratings.train.txt") as f:
    lines = f.readlines()
    for line in lines:
      record = line.split("\t")
      user_id = int(record[0])
      movie_id = int(record[1])
      rating = float(record[2])
      q_here = q[movie_id]
      p_here = p[user_id]
      error_here += np.square(rating - q_here.dot(p_here.T))
  for q_here in q.values():
    error_here += reg_penalty*(np.square(np.linalg.norm(q_here,2)))
  for p_here in p.values():
    error_here += reg_penalty*(np.square(np.linalg.norm(p_here,2)))
  error_vals.append(error_here)

print(error_vals[-1])

plt.xlabel("Number of iterations")
plt.ylabel("Error")
plt.title("Error vs. number of iterations")
plt.plot(list(range(1,max_iter+1)), error_vals)
plt.savefig("ErrorVsIterations.jpg")

"""The best of value of the learning rate that I found was 0.01. 
* Using the learning rate of 0.1 led to the values of error function to diverge and inflated values of p and q to infinity
* Also, making the learning rate to 0.001 led the error function to monotonically decrease but the not converge
* Hence, the learning rate that was obtained optimal by me after trying a lot of values in the range of (0.001, 0.1) was 0.01, which gave the error value of around 50910 in its last iteration.
"""

